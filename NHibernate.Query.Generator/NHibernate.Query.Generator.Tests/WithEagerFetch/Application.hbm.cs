//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 2/12/2008 8:39:51 PM
// This source code was auto-generated by NHQG (), Version 1.9.1125.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_Application Application {
            get {
                return new Root_Query_Application();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_Setting Setting {
            get {
                return new Root_Query_Setting();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.GlobalSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_GlobalSetting GlobalSetting {
            get {
                return new Root_Query_GlobalSetting();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.UserSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public static Root_Query_UserSetting UserSetting {
            get {
                return new Root_Query_UserSetting();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_Application<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Application..ctor
            /// </summary>
            public Query_Application() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Application..ctor
            /// </summary>
            public Query_Application(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Application..ctor
            /// </summary>
            public Query_Application(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Application.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Application.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Application.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Obsolete {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Obsolete", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Application.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Operations Operations {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Operations");
                    return new Query_Collection_Operations(this, "Operations", temp);
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Application.Settings
            /// </summary>
            public virtual Query_Settings<T1> Settings {
                get {
                    return new Query_Settings<T1>(this, "Settings", this.associationPath);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            public class Query_Collection_Operations : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Operations(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Operation<T1> With() {
                    Query_Operation<T1> query = new Query_Operation<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Operation<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Operation<T1> query = new Query_Operation<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Operation<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Operation<T1> query = new Query_Operation<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Operation<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Operation<T1> query = new Query_Operation<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Application.Query_Settings
            /// </summary>
            [System.CLSCompliantAttribute(false)]
            public partial class Query_Settings<T2> : QueryBuilder<T2>
             {
                
                /// <summary>
                /// Query helper for member Query_Settings..ctor
                /// </summary>
                public Query_Settings() : 
                        this(null, "this", null) {
                }
                
                /// <summary>
                /// Query helper for member Query_Settings..ctor
                /// </summary>
                public Query_Settings(QueryBuilder<T2> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                /// <summary>
                /// Query helper for member Query_Settings..ctor
                /// </summary>
                public Query_Settings(QueryBuilder<T2> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                        base(parent, name, associationPath, backTrackAssociationOnEquality) {
                }
                
                public virtual Query_Collection_UserSettings UserSettings {
                    get {
                        string temp = associationPath;
                        temp = (temp + ".Settings.UserSettings");
                        return new Query_Collection_UserSettings(myQueryParent, "UserSettings", temp);
                    }
                }
                
                public virtual Query_Collection_GlobalSettings GlobalSettings {
                    get {
                        string temp = associationPath;
                        temp = (temp + ".Settings.GlobalSettings");
                        return new Query_Collection_GlobalSettings(myQueryParent, "GlobalSettings", temp);
                    }
                }
                
                [System.CLSCompliantAttribute(false)]
                public class Query_Collection_UserSettings : CollectionQueryBuilder<T2> {
                    
                    public Query_Collection_UserSettings(QueryBuilder<T2> parent, string name, string associationPath) : 
                            base(parent, name, associationPath) {
                    }
                    
                    public virtual Query_UserSetting<T2> With() {
                        Query_UserSetting<T2> query = new Query_UserSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                        query.fetchMode = NHibernate.FetchMode.Default;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_UserSetting<T2> With(NHibernate.SqlCommand.JoinType joinType) {
                        Query_UserSetting<T2> query = new Query_UserSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = joinType;
                        query.fetchMode = NHibernate.FetchMode.Default;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_UserSetting<T2> With(NHibernate.FetchMode fetchMode) {
                        Query_UserSetting<T2> query = new Query_UserSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                        query.fetchMode = fetchMode;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_UserSetting<T2> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                        Query_UserSetting<T2> query = new Query_UserSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = joinType;
                        query.fetchMode = fetchMode;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                }
                
                [System.CLSCompliantAttribute(false)]
                public class Query_Collection_GlobalSettings : CollectionQueryBuilder<T2> {
                    
                    public Query_Collection_GlobalSettings(QueryBuilder<T2> parent, string name, string associationPath) : 
                            base(parent, name, associationPath) {
                    }
                    
                    public virtual Query_GlobalSetting<T2> With() {
                        Query_GlobalSetting<T2> query = new Query_GlobalSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                        query.fetchMode = NHibernate.FetchMode.Default;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_GlobalSetting<T2> With(NHibernate.SqlCommand.JoinType joinType) {
                        Query_GlobalSetting<T2> query = new Query_GlobalSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = joinType;
                        query.fetchMode = NHibernate.FetchMode.Default;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_GlobalSetting<T2> With(NHibernate.FetchMode fetchMode) {
                        Query_GlobalSetting<T2> query = new Query_GlobalSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                        query.fetchMode = fetchMode;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                    
                    public virtual Query_GlobalSetting<T2> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                        Query_GlobalSetting<T2> query = new Query_GlobalSetting<T2>(this, this.myName, this.associationPath);
                        query.joinType = joinType;
                        query.fetchMode = fetchMode;
                        query.ShouldSkipJoinOnIdEquality = true;
                        return query;
                    }
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_Application : Query_Application<NHibernate.Query.Generator.Tests.WithEagerFetch.Application> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_Setting<T3> : QueryBuilder<T3>
         {
            
            /// <summary>
            /// Query helper for member Query_Setting..ctor
            /// </summary>
            public Query_Setting() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Setting..ctor
            /// </summary>
            public Query_Setting(QueryBuilder<T3> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Setting..ctor
            /// </summary>
            public Query_Setting(QueryBuilder<T3> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Setting.
            /// </summary>
            public virtual PropertyQueryBuilder<T3> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T3> child = new PropertyQueryBuilder<T3>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Setting.
            /// </summary>
            public virtual PropertyQueryBuilder<T3> Value {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T3> child = new PropertyQueryBuilder<T3>(null, "Value", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Setting.
            /// </summary>
            public virtual IdQueryBuilder<T3> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T3> child = new IdQueryBuilder<T3>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Setting.
            /// </summary>
            public virtual Query_Application<T3> Application {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Application");
                    Query_Application<T3> child = new Query_Application<T3>(null, "Application", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_Setting : Query_Setting<NHibernate.Query.Generator.Tests.WithEagerFetch.Setting> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_GlobalSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_GlobalSetting<T4> : Query_Setting<T4>
         {
            
            /// <summary>
            /// Query helper for member Query_GlobalSetting..ctor
            /// </summary>
            public Query_GlobalSetting() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_GlobalSetting..ctor
            /// </summary>
            public Query_GlobalSetting(QueryBuilder<T4> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_GlobalSetting..ctor
            /// </summary>
            public Query_GlobalSetting(QueryBuilder<T4> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_GlobalSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_GlobalSetting : Query_GlobalSetting<NHibernate.Query.Generator.Tests.WithEagerFetch.GlobalSetting> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_UserSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Query_UserSetting<T5> : Query_Setting<T5>
         {
            
            /// <summary>
            /// Query helper for member Query_UserSetting..ctor
            /// </summary>
            public Query_UserSetting() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_UserSetting..ctor
            /// </summary>
            public Query_UserSetting(QueryBuilder<T5> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_UserSetting..ctor
            /// </summary>
            public Query_UserSetting(QueryBuilder<T5> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_UserSetting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Root_Query_UserSetting : Query_UserSetting<NHibernate.Query.Generator.Tests.WithEagerFetch.UserSetting> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Application {
            
            /// <summary>
            /// Query helper for member Application.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Obsolete
            /// </summary>
            public static OrderByClause Obsolete {
                get {
                    return new OrderByClause("Obsolete");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
        
        /// <summary>
        /// Query helper for member OrderBy.Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Setting {
            
            /// <summary>
            /// Query helper for member Setting.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Value
            /// </summary>
            public static OrderByClause Value {
                get {
                    return new OrderByClause("Value");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Application {
            
            /// <summary>
            /// Query helper for member Application.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Obsolete
            /// </summary>
            public static PropertyProjectionBuilder Obsolete {
                get {
                    return new PropertyProjectionBuilder("Obsolete");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Id
            /// </summary>
            public static PropertyProjectionBuilder Id {
                get {
                    return new PropertyProjectionBuilder("Id");
                }
            }
        }
        
        /// <summary>
        /// Query helper for member ProjectBy.Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Setting {
            
            /// <summary>
            /// Query helper for member Setting.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Value
            /// </summary>
            public static PropertyProjectionBuilder Value {
                get {
                    return new PropertyProjectionBuilder("Value");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Application
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Application {
            
            /// <summary>
            /// Query helper for member Application.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Obsolete
            /// </summary>
            public static NHibernate.Criterion.IProjection Obsolete {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Obsolete");
                }
            }
            
            /// <summary>
            /// Query helper for member Application.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
        
        /// <summary>
        /// Query helper for member GroupBy.Setting
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        public partial class Setting {
            
            /// <summary>
            /// Query helper for member Setting.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Value
            /// </summary>
            public static NHibernate.Criterion.IProjection Value {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Value");
                }
            }
            
            /// <summary>
            /// Query helper for member Setting.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
