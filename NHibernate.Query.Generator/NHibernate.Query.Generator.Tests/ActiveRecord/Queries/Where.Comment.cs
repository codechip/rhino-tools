//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Query {
    
    
    public partial class For {
        
        /// Query Builder for member Comment
        public static Query.QueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.Comment> Comment {
            get {
                return new Query.QueryBuilder<NHibernate.Query.Generator.Tests.ActiveRecord.Comment>();
            }
        }
    }
    
    public partial class Where {
        
        /// Where for member _root_Where_Comment
        static Root_Where_Comment _root_Where_Comment = new Root_Where_Comment();
        
        /// Where for member Comment
        public static Root_Where_Comment Comment {
            get {
                return _root_Where_Comment;
            }
        }
        
        /// Where for member Where_Comment
        public partial class Where_Comment<T1> : Query.WhereClause<T1>
         {
            
            /// Where for member .ctor
            public Where_Comment(string name, string associationPath) : 
                    base(name, associationPath) {
            }
            
            /// Where for member .ctor
            public Where_Comment(string name, string associationPath, bool backTrack) : 
                    base(name, associationPath, backTrack) {
            }
            
            /// Where for member 
            public virtual Query.WhereClauseProperty<T1> Author {
                get {
                    string temp = associationPath;
                    return new Query.WhereClauseProperty<T1>("Author", temp);
                }
            }
            
            /// Where for member 
            public virtual Query.WhereClauseProperty<T1> Content {
                get {
                    string temp = associationPath;
                    return new Query.WhereClauseProperty<T1>("Content", temp);
                }
            }
            
            /// Where for member 
            public virtual Query.WhereClause<T1> Id {
                get {
                    string temp = associationPath;
                    return new Query.WhereClause<T1>("Id", temp);
                }
            }
            
            /// Where for member 
            public virtual Where_Post<T1> Post {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Post");
                    return new Where_Post<T1>("Post", temp, true);
                }
            }
        }
        
        /// Where for member Root_Where_Comment
        public partial class Root_Where_Comment : Where_Comment<NHibernate.Query.Generator.Tests.ActiveRecord.Comment> {
            
            /// Where for member .ctor
            public Root_Where_Comment() : 
                    base("this", null) {
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// Projection for member _root_Projection_Comment
        static Root_Projection_Comment _root_Projection_Comment = new Root_Projection_Comment();
        
        /// Projection for member Comment
        public static Root_Projection_Comment Comment {
            get {
                return _root_Projection_Comment;
            }
        }
        
        /// Projection for member Projection_Comment
        public partial class Projection_Comment<T2> : Query.ProjectionEntity<T2>
         {
            
            /// Projection for member .ctor
            public Projection_Comment(string name, string associationPath) : 
                    base(name, associationPath) {
            }
            
            /// Projection for member .ctor
            public Projection_Comment(string name, string associationPath, bool backTrack) : 
                    base(name, associationPath, backTrack) {
            }
            
            /// Projection for member 
            public virtual Query.ProjectionClauseProperty<T2> Author {
                get {
                    string temp = associationPath;
                    return new Query.ProjectionClauseProperty<T2>("Author", temp);
                }
            }
            
            /// Projection for member 
            public virtual Query.ProjectionClauseProperty<T2> Content {
                get {
                    string temp = associationPath;
                    return new Query.ProjectionClauseProperty<T2>("Content", temp);
                }
            }
            
            /// Projection for member 
            public virtual Query.ProjectionClauseProperty<T2> Id {
                get {
                    string temp = associationPath;
                    return new Query.ProjectionClauseProperty<T2>("Id", temp);
                }
            }
            
            /// Projection for member 
            public virtual Projection_Post<T2> Post {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Post");
                    return new Projection_Post<T2>("Post", temp, true);
                }
            }
        }
        
        /// Projection for member Root_Projection_Comment
        public partial class Root_Projection_Comment : Projection_Comment<NHibernate.Query.Generator.Tests.ActiveRecord.Comment> {
            
            /// Projection for member .ctor
            public Root_Projection_Comment() : 
                    base("this", null) {
            }
        }
    }
    
    public partial class OrderBy {
        
        /// OrderBy for member _root_OrderBy_Comment
        static Root_OrderBy_Comment _root_OrderBy_Comment = new Root_OrderBy_Comment();
        
        /// OrderBy for member Comment
        public static Root_OrderBy_Comment Comment {
            get {
                return _root_OrderBy_Comment;
            }
        }
        
        /// OrderBy for member OrderBy_Comment
        public partial class OrderBy_Comment<T3> : Query.QueryPart
         {
            
            /// OrderBy for member .ctor
            public OrderBy_Comment(string name, string associationPath) : 
                    base(name, associationPath) {
            }
            
            /// OrderBy for member .ctor
            public OrderBy_Comment(string name, string associationPath, bool backTrack) : 
                    base(name, associationPath, backTrack) {
            }
            
            /// OrderBy for member 
            public virtual Query.OrderByClauseProperty<T3> Author {
                get {
                    string temp = associationPath;
                    return new Query.OrderByClauseProperty<T3>("Author", temp);
                }
            }
            
            /// OrderBy for member 
            public virtual Query.OrderByClauseProperty<T3> Content {
                get {
                    string temp = associationPath;
                    return new Query.OrderByClauseProperty<T3>("Content", temp);
                }
            }
            
            /// OrderBy for member 
            public virtual Query.OrderByClauseProperty<T3> Id {
                get {
                    string temp = associationPath;
                    return new Query.OrderByClauseProperty<T3>("Id", temp);
                }
            }
            
            /// OrderBy for member 
            public virtual OrderBy_Post<T3> Post {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Post");
                    return new OrderBy_Post<T3>("Post", temp, true);
                }
            }
        }
        
        /// OrderBy for member Root_OrderBy_Comment
        public partial class Root_OrderBy_Comment : OrderBy_Comment<NHibernate.Query.Generator.Tests.ActiveRecord.Comment> {
            
            /// OrderBy for member .ctor
            public Root_OrderBy_Comment() : 
                    base("this", null) {
            }
        }
    }
}
