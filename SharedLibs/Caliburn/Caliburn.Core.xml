<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.Core</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Core.Invocation.BatchingDispatcher">
            <summary>
            An impelementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> that efficiently batches updates to the UI thread.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.IDispatcher">
            <summary>
            Abstracts a dispatcher capable of executing code on a background or UI thread.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.IDispatcher.ExecuteOnBackgroundThread(System.Action,System.Action)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.IDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.BatchingDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.BatchingDispatcher.ExecuteOnBackgroundThread(System.Action,System.Action)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.BatchingDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.DispatcherImplementation">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> for WPF.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DispatcherImplementation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Invocation.DispatcherImplementation"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DispatcherImplementation.ExecuteOnBackgroundThread(System.Action,System.Action)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DispatcherImplementation.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.ProcParams`1">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.StaticProcParams`1">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.FuncParams`2">
            <summary>Defines a delegate to a instance function (method that return something) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <param name="target">The target instance (this)</param>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.StaticFuncParams`2">
            <summary>Defines a delegate to a static function (method that return something) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1">
            <summary>Dynamic method wrapper class</summary>
            <typeparam name="T">The type implementing the method desired.</typeparam>
            <remarks>
            You can use any reference or value-type, including built-in primitive types
            </remarks>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1">
            <summary>Ãœber Base class for all Dynamic classes, this class holds all the code generation and is 
            specialized and JITted against the delegate signature</summary>
            <typeparam name="D">The delegate type that we call-through</typeparam>
        </member>
        <member name="F:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.InstanceFlags">
            <summary>BindingFlags for public and non-public instance methods/fields/properties</summary>
        </member>
        <member name="F:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.StaticFlags">
            <summary>BindingFlags for public and non-public static methods/fields/properties</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance">
            <summary>Represents an instance member.</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Function`1">
            <summary>Represents an instance function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Procedure">
            <summary>Represents an instance procedure (method that returns nothing).</summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static">
            <summary>Represents a static member.</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Function`1">
            <summary>Represents a static function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Procedure">
            <summary>Represents a static procedure (method that returns nothing).</summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Instance">
            <summary>Represents instance methods (those that get a "this" argument)</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Instance.Function`1">
            <summary>Represents functions (methods that return a value</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Instance.Function`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[]</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Instance.Procedure">
            <summary>Represents procedures (methods that return nothing</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Instance.Procedure.Params">
            <summary>Represents Late-bound argument list (e.g. params object[]</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Static">
            <summary>Represents static methods (no "this" instance passed)</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Static.Function`1">
            <summary>Represents functions (methods that return a value)</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Static.Function`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Static.Procedure">
            <summary>Represents procedures (methods that return nothing)</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.Dynamic`1.Static.Procedure.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.DynamicEmit">
            <summary>
            Impelments common functionality needed when generating IL.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.#cctor">
            <summary>
            Initializes the <see cref="T:Caliburn.Core.Invocation.DynamicEmit"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Invocation.DynamicEmit"/> class.
            </summary>
            <param name="dm">The dm.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Invocation.DynamicEmit"/> class.
            </summary>
            <param name="ilGen">The il gen.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.DeclareLocal(System.Type)">
            <summary>
            Declares the local.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadElementReference">
            <summary>
            Loads the element reference.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadLiteral(System.Int32)">
            <summary>
            Loads the literal.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadLiteral(System.String)">
            <summary>
            Loads the literal.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadArrayLength">
            <summary>
            Loads the length of the array.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadToken(System.Type)">
            <summary>
            Loads the token.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.TypeFromHandle">
            <summary>
            Types from handle.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadType(System.Type)">
            <summary>
            Loads the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadType``1">
            <summary>
            Loads the type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.Convert(System.Type)">
            <summary>
            Converts the specified to type.
            </summary>
            <param name="toType">To type.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.Convert``1">
            <summary>
            Converts this instance.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.CastTo(System.Type)">
            <summary>
            Casts to.
            </summary>
            <param name="toType">To type.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.CastTo(System.Type,System.Type)">
            <summary>
            Casts to.
            </summary>
            <param name="fromType">From type.</param>
            <param name="toType">To type.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadArgumentAddress(System.Int32)">
            <summary>
            Loads the argument address.
            </summary>
            <param name="argumentIndex">Index of the argument.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadArgument(System.Int32)">
            <summary>
            Loads the argument.
            </summary>
            <param name="argumentIndex">Index of the argument.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadLocal(System.Int32)">
            <summary>
            Loads the local.
            </summary>
            <param name="localIndex">Index of the local.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.StoreLocal(System.Int32)">
            <summary>
            Stores the local.
            </summary>
            <param name="localIndex">Index of the local.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.Return">
            <summary>
            Returns this instance.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.Call(System.Reflection.MethodInfo)">
            <summary>
            Calls the specified method.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.LoadArgument(System.Boolean,System.Int32)">
            <summary>
            Loads the argument.
            </summary>
            <param name="targetIsValueType">if set to <c>true</c> [target is value type].</param>
            <param name="argumentIndex">Index of the argument.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.DynamicEmit.Pop">
            <summary>
            Pops this instance.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.EventHandlerFactory">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Invocation.IEventHandlerFactory"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Invocation.IEventHandlerFactory">
            <summary>
            A service capable of creating instances of <see cref="T:Caliburn.Core.Invocation.IEventHandler"/> for an instance and a given event.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.IEventHandlerFactory.Wire(System.Object,System.String)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.IEventHandlerFactory.Wire(System.Object,System.Reflection.EventInfo)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventInfo">The event info.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.EventHandlerFactory.Wire(System.Object,System.String)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventName">Name of the event.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.EventHandlerFactory.Wire(System.Object,System.Reflection.EventInfo)">
            <summary>
            Wires an event handler to the sender for the specified event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventInfo">The event info.</param>
            <returns>The event handler.</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.IEventHandler">
            <summary>
            Represents a generic method of setting an event handler.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.IEventHandler.SetActualHandler(System.Action{System.Object[]})">
            <summary>
            Sets the actual handler for the event.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.Execute">
            <summary>
            Utility methods supporting various forms of method execution.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.Initialize(Caliburn.Core.Invocation.IDispatcher)">
            <summary>
            Initializes for execution.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.OnBackgroundThread(System.Action)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.OnBackgroundThread(System.Action,System.Action)">
            <summary>
            Executes the backgroundAction on a background thread.
            </summary>
            <param name="backgroundAction">The action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.OnUIThread(System.Action)">
            <summary>
            Executes the action on the UI thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.Execute.SimpleDispatcher">
            <summary>
            A simple implementation of <see cref="T:Caliburn.Core.Invocation.IDispatcher"/> suitable only during test scenarios.
            </summary>
            <remarks>This implementation only executes code on the calling thread.</remarks>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.SimpleDispatcher.ExecuteOnBackgroundThread(System.Action,System.Action)">
            <summary>
            Executes code on the background thread.
            </summary>
            <param name="backgroundAction">The background action.</param>
            <param name="uiCallback">The UI callback.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.Execute.SimpleDispatcher.ExecuteOnUIThread(System.Action)">
            <summary>
            Executes code on the UI thread.
            </summary>
            <param name="uiAction">The UI action.</param>
        </member>
        <member name="T:Caliburn.Core.Invocation.IMethod">
            <summary>
            Abstracts a generic way of invoking procedures and functions without using reflection.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Metadata.IMetadataContainer">
            <summary>
            Stores metadata.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Metadata.IMetadataContainer.AddMetadata(Caliburn.Core.Metadata.IMetadata)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.IMetadataContainer.GetMetadata``1">
            <summary>
            Retrieves metadata from the store.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.Metadata.IMetadataContainer.GetMatchingMetadata``1">
            <summary>
            Gets the matching metadata.
            </summary>
            <typeparam name="T">The type to match.</typeparam>
            <returns>The matches</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.IMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the specified method on the provided instance with the given parameters.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the function or null if it is a procedure.</returns>
        </member>
        <member name="M:Caliburn.Core.Invocation.IMethod.CreateBackgroundTask(System.Object,System.Object[])">
            <summary>
            Creates a background task for executing this method asynchronously.
            </summary>
            <param name="instance">The instance.</param>
            <param name="parameters">The parameters.</param>
            <returns>An instance of <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/>.</returns>
        </member>
        <member name="P:Caliburn.Core.Invocation.IMethod.Info">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> to which this instance applies.
            </summary>
            <value>The info.</value>
        </member>
        <member name="T:Caliburn.Core.Invocation.IMethodFactory">
            <summary>
            A service capable of creating instances of <see cref="T:Caliburn.Core.Invocation.IMethod"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.IMethodFactory.CreateFrom(System.Reflection.MethodInfo)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Core.Invocation.IMethod"/> using the <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.MethodFactory">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Invocation.IMethodFactory"/>.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.MethodFactory.#ctor(Caliburn.Core.Threading.IThreadPool)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Invocation.MethodFactory"/> class.
            </summary>
            <param name="threadPool">The thread pool.</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.MethodFactory.CreateFrom(System.Reflection.MethodInfo)">
            <summary>
            Creates an instance of <see cref="T:Caliburn.Core.Invocation.IMethod"/> using the <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>An instance of <see cref="T:Caliburn.Core.Invocation.IMethod"/>.</returns>
        </member>
        <member name="T:Caliburn.Core.Metadata.MetadataContainer">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Metadata.IMetadataContainer"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Core.PropertyChangedBase">
            <summary>
            A base class that implements the infrastructure for property change notification and automatically performs UI thread marshalling.
            </summary>
        </member>
        <member name="M:Caliburn.Core.PropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>
            Notifies subscribers of the property change.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Caliburn.Core.PropertyChangedBase.RaisePropertyChangedEventImmediately(System.String)">
            <summary>
            Raises the property changed event immediately.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="E:Caliburn.Core.PropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Metadata.MetadataContainer.AddMetadataFrom(System.Reflection.MemberInfo)">
            <summary>
            Adds the metadata from the provided member to the collection.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.MetadataContainer.AddMetadata(Caliburn.Core.Metadata.IMetadata)">
            <summary>
            Adds metadata to the store.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.MetadataContainer.GetMetadata``1">
            <summary>
            Retrieves metadata from the store.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.Metadata.MetadataContainer.GetMatchingMetadata``1">
            <summary>
            Gets the matching metadata.
            </summary>
            <typeparam name="T">The type to match.</typeparam>
            <returns>The matches</returns>
        </member>
        <member name="T:Caliburn.Core.Invocation.ParameterCountMismatchException">
            <summary>Exception thrown when the arguments passed to a delegate do not match the parameter count of the method being called</summary>
        </member>
        <member name="M:Caliburn.Core.Invocation.ParameterCountMismatchException.#ctor(System.Type,System.String,System.Int32,System.Int32)">
            <summary>Constructs a ParameterCountMismatchException and fills in the error message based on the characteristics 
            specified</summary>
            <param name="type">The Type the method is being called against</param>
            <param name="methodName">The method name being called</param>
            <param name="expectedParameterCount">The number of parameters that method expects</param>
            <param name="actualArgumentCount">The number of arguments specified at call time (for Params-type delegates) or at
            CreateDelegate time (for Explicit-type delegates)</param>
        </member>
        <member name="M:Caliburn.Core.Invocation.ParameterCountMismatchException.CheckAndThrow(System.Type,System.String,System.Int32,System.Int32)">
            <summary>Checks the parameter counts and throws a ParameterCountMismatchException if they are not the same.</summary>
            <param name="type">The Type the method is being called against</param>
            <param name="methodName">The method name being called</param>
            <param name="expectedParameterCount">The number of parameters that method expects</param>
            <param name="actualArgumentCount">The number of arguments specified at call time (for Params-type delegates) or at
            CreateDelegate time (for Explicit-type delegates)</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Caliburn.Core.MemoryManagement.BaseDictionary`2" -->
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.CopyTo(`2[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.Contains(`2)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.Remove(`2)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.Add(`2)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.BaseDictionary`2.Collection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.KeyCollection.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.BaseDictionary`2.ValueCollection.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.BaseDictionary`2.ValueCollection"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="T:Caliburn.Core.MemoryManagement.WeakReference`1">
            <summary>
            Adds strong typing to WeakReference.Target using generics.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.WeakReference`1.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.WeakReference`1.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference"/> object.
            </summary>
            <value></value>
            <returns>null if the object referenced by the current <see cref="T:System.WeakReference"/> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference"/> object.</returns>
            <exception cref="T:System.InvalidOperationException">The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Caliburn.Core.MemoryManagement.WeakKeyComparer`1" -->
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyComparer`1.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyComparer`1.Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param>
            <param name="y">The second object of type <paramref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="T:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2">
             <summary>
             A generic dictionary, which allows its keys 
             to be garbage collected if there are no other references
             to them than from the dictionary itself.
             </summary>
            
             <remarks>
             If the key of a particular entry in the dictionary
             has been collected, then both the key and value become effectively
             unreachable. However, left-over WeakReference objects for the key
             and value will physically remain in the dictionary until
             RemoveCollectedEntries is called. This will lead to a discrepancy
             between the Count property and the number of iterations required
             to visit all of the elements of the dictionary using its
             enumerator or those of the Keys and Values collections. Similarly,
             CopyTo will copy fewer than Count elements in this situation.
             </remarks>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.SetValue(`0,`1)">
            <summary>
            Sets the value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.RemoveCollectedEntries">
            <summary>
            Removes the left-over weak references for entries in the dictionary
            whose key has already been reclaimed by the garbage
            collector. This will reduce the dictionary's Count by the number
            of dead key-value pairs that were eliminated.
            </summary>
        </member>
        <member name="P:Caliburn.Core.MemoryManagement.WeakKeyedDictionary`2.Count">
             <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
             </summary>
             <value></value>
             <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <remarks>
             WARNING: The count returned here may include entries for which
             either the key or value objects have already been garbage
             collected. Call RemoveCollectedEntries to weed out collected
             entries and update the count accordingly.
             </remarks>
        </member>
        <member name="T:Caliburn.Core.MemoryManagement.WeakKeyReference`1">
            <summary>
            Provides a weak reference to an object of the given type to be used in
            a WeakDictionary along with the given comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Caliburn.Core.MemoryManagement.WeakKeyReference`1.HashCode">
            <summary>
            The HashCode of the key.
            </summary>
        </member>
        <member name="M:Caliburn.Core.MemoryManagement.WeakKeyReference`1.#ctor(`0,Caliburn.Core.MemoryManagement.WeakKeyComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.MemoryManagement.WeakKeyReference`1"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="T:Caliburn.Core.Metadata.IMetadata">
            <summary>
            A marker interface for custom discoverable metadata.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Metadata.PerRequestAttribute">
            <summary>
            An attribute that directs Caliburn to register the component with a per request lifetime.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Metadata.RegisterAttribute">
            <summary>
            An attribute that gives directions to Caliburn concerning component registration.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Metadata.RegisterAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.PerRequestAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Metadata.PerRequestAttribute"/> class.
            </summary>
            <param name="typeKey">The type key.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.PerRequestAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
        </member>
        <member name="P:Caliburn.Core.Metadata.PerRequestAttribute.TypeKey">
            <summary>
            Gets the type key.
            </summary>
            <value>The type key.</value>
        </member>
        <member name="T:Caliburn.Core.Metadata.SingletonAttribute">
            <summary>
            An attribute that directs Caliburn to register the component with a singleton lifetime.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Metadata.SingletonAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Metadata.SingletonAttribute"/> class.
            </summary>
            <param name="typeKey">The type key.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.SingletonAttribute.GetComponentInfo(System.Type)">
            <summary>
            Registers the type with the specified container.
            </summary>
            <param name="decoratedType">The decorated type.</param>
        </member>
        <member name="P:Caliburn.Core.Metadata.SingletonAttribute.TypeKey">
            <summary>
            Gets the type key.
            </summary>
            <value>The type key.</value>
        </member>
        <member name="T:Caliburn.Core.Metadata.ViewMetadata">
            <summary>
            Metadata that stores the current view over a model.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Metadata.ViewMetadata.SetView(System.Object,System.Boolean)">
            <summary>
            Sets the view.
            </summary>
            <param name="view">The view.</param>
            <param name="useWeakReference">if set to <c>true</c> uses a weak reference.</param>
        </member>
        <member name="M:Caliburn.Core.Metadata.ViewMetadata.GetTypedView``1">
            <summary>
            Gets a strongly typed view.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Core.Metadata.ViewMetadata.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="T:Caliburn.Core.Threading.BackgroundTask">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Threading.IBackgroundTask">
            <summary>
            A task that can execute asynchronously.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.IBackgroundTask.Enqueue(System.Object)">
            <summary>
            Enqueues the task with the specified user state.
            </summary>
            <param name="userState">The user supplied state.</param>
        </member>
        <member name="M:Caliburn.Core.Threading.IBackgroundTask.Cancel">
            <summary>
            Cancels the task.
            </summary>
        </member>
        <member name="P:Caliburn.Core.Threading.IBackgroundTask.IsBusy">
            <summary>
            Gets a value indicating whether this task is currently processing.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.IBackgroundTask.CancellationPending">
            <summary>
            Gets a value indicating whether this task's cancellation is pending.
            </summary>
            <value><c>true</c> if cancellation is pending; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Caliburn.Core.Threading.IBackgroundTask.ProgressChanged">
            <summary>
            Occurs when the background task indicates that progress has changed.
            </summary>
        </member>
        <member name="E:Caliburn.Core.Threading.IBackgroundTask.Completed">
            <summary>
            Occurs when the background task has completed either successfully, by cancellation or with an error.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.BackgroundTask.#ctor(Caliburn.Core.Threading.IThreadPool,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Threading.BackgroundTask"/> class.
            </summary>
            <param name="threadPool">The thread pool.</param>
            <param name="theDelegate">The delegate to execute.</param>
        </member>
        <member name="M:Caliburn.Core.Threading.BackgroundTask.Enqueue(System.Object)">
            <summary>
            Enqueues the task with the specified user state.
            </summary>
            <param name="userState">The user supplied state.</param>
        </member>
        <member name="M:Caliburn.Core.Threading.BackgroundTask.Cancel">
            <summary>
            Cancels the task.
            </summary>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTask.IsBusy">
            <summary>
            Gets a value indicating whether this task is currently processing.
            </summary>
            <value><c>true</c> if this instance is busy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTask.CancellationPending">
            <summary>
            Gets a value indicating whether this task's cancellation is pending.
            </summary>
            <value><c>true</c> if cancellation is pending; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Caliburn.Core.Threading.BackgroundTask.ProgressChanged">
            <summary>
            Occurs when the background task indicates that progress has changed.
            </summary>
        </member>
        <member name="E:Caliburn.Core.Threading.BackgroundTask.Completed">
            <summary>
            Occurs when the background task has completed either successfully, by cancellation or with an error.
            </summary>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTask.CurrentContext">
            <summary>
            Gets or sets the context for the currently executing task.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="T:Caliburn.Core.Threading.IBackgroundContext">
            <summary>
            The context for the currently executing background task.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.IBackgroundContext.UpdateProgress(System.Double)">
            <summary>
            Enables the current task to update its progress.
            </summary>
            <param name="percentage">The percentage.</param>
        </member>
        <member name="P:Caliburn.Core.Threading.IBackgroundContext.IsCancelled">
            <summary>
            Gets a value indicating whether the current task has been cancelled.
            </summary>
            <value>
            	<c>true</c> if cancelled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> used to provide details of a <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/> complete event.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs.#ctor(System.Object,System.Object,System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="userState">State of the user.</param>
            <param name="cancelled">if set to <c>true</c> [cancelled].</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs.Result">
            <summary>
            Gets the result of the underlying function.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs.UserState">
            <summary>
            Gets the previously supplied user state.
            </summary>
            <value>The state of the user.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs.Cancelled">
            <summary>
            Gets a value indicating whether the <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/> was cancelled.
            </summary>
            <value><c>true</c> if cancelled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskCompletedEventArgs.Error">
            <summary>
            Gets an exception thrown by the <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/> if one occurred.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs">
            <summary>
            An <see cref="T:System.EventArgs"/> used to provide details of a <see cref="T:Caliburn.Core.Threading.IBackgroundTask"/> progress change event.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs.#ctor(System.Object,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs"/> class.
            </summary>
            <param name="userState">State of the user.</param>
            <param name="percentage">The percentage.</param>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs.UserState">
            <summary>
            Gets original state provided by the user.
            </summary>
            <value>The state of the user.</value>
        </member>
        <member name="P:Caliburn.Core.Threading.BackgroundTaskProgressChangedEventArgs.Percentage">
            <summary>
            Gets the percentage of work complete.
            </summary>
            <value>The percentage.</value>
        </member>
        <member name="T:Caliburn.Core.Threading.DefaultThreadPool">
            <summary>
            An implementation of <see cref="T:Caliburn.Core.Threading.IThreadPool"/>.
            </summary>
        </member>
        <member name="T:Caliburn.Core.Threading.IThreadPool">
            <summary>
            A service that implements a thread pool.
            </summary>
        </member>
        <member name="M:Caliburn.Core.Threading.IThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues the user work item.
            </summary>
            <param name="callback">The work callback.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.Threading.DefaultThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queues the user work item.
            </summary>
            <param name="callback">The work callback.</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Core.BindableCollection`1">
            <summary>
            A base collection class that supports automatic UI thread marshalling.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Caliburn.Core.BindableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.Core.BindableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
        </member>
        <member name="M:Caliburn.Core.BindableCollection`1.RaiseCollectionChangedEventImmediately(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the collection changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Caliburn.Core.BindableCollection`1.RaisePropertyChangedEventImmediately(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the property changed event immediately.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Caliburn.Core.CaliburnApplication">
            <summary>
            A gateway for configuring Caliburn.
            </summary>
        </member>
        <member name="M:Caliburn.Core.CaliburnApplication.ConfigureCore">
            <summary>
            Configures caliburn with the <see cref="T:Caliburn.Core.SimpleContainer"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.CaliburnApplication.ConfigureCore``1(``0)">
            <summary>
            Configures Caliburn with the specified container implementation.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.CaliburnApplication.ConfigureCore(Microsoft.Practices.ServiceLocation.IServiceLocator,Caliburn.Core.IConfigurator)">
            <summary>
            Configures Caliburn with the specified <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> and container <see cref="T:Caliburn.Core.IConfigurator"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="configurator">The configurator.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.CaliburnApplication.ConfigureCore(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Action{System.Collections.Generic.IEnumerable{Caliburn.Core.ComponentInfo}})">
            <summary>
            Caliburn with the specified <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> and configurator method.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="configurator">The configurator.</param>
            <returns></returns>
        </member>
        <member name="P:Caliburn.Core.CaliburnApplication.IsInDesignMode">
            <summary>
            Gets a value indicating whether the framework is in design mode.
            </summary>
            <value>
            	<c>true</c> if the framework is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Caliburn.Core.CaliburnConfiguration">
            <summary>
            A base class used by Caliburn modules to extend the configuration mechanism.
            </summary>
        </member>
        <member name="T:Caliburn.Core.IConfigurationHook">
            <summary>
            Enables other Caliburn modules to hook into the core configuration.
            </summary>
        </member>
        <member name="P:Caliburn.Core.IConfigurationHook.Core">
            <summary>
            Gets the core configuration.
            </summary>
            <value>The core configuration.</value>
        </member>
        <member name="M:Caliburn.Core.CaliburnConfiguration.#ctor(Caliburn.Core.IConfigurationHook)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CaliburnConfiguration"/> class.
            </summary>
            <param name="hook">The hook.</param>
        </member>
        <member name="M:Caliburn.Core.CaliburnConfiguration.StartApplication">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="M:Caliburn.Core.CaliburnConfiguration.GetComponents">
            <summary>
            Gets the component information for this module.
            </summary>
        </member>
        <member name="M:Caliburn.Core.CaliburnConfiguration.Configure">
            <summary>
            Configures this module.
            </summary>
        </member>
        <member name="P:Caliburn.Core.CaliburnConfiguration.Caliburn#Core#IConfigurationHook#Core">
            <summary>
            Gets the core configuration.
            </summary>
            <value>The core configuration.</value>
        </member>
        <member name="P:Caliburn.Core.CaliburnConfiguration.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.Core.CaliburnException">
            <summary>
            The general exception thrown by the Caliburn framework.
            </summary>
        </member>
        <member name="M:Caliburn.Core.CaliburnException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CaliburnException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:Caliburn.Core.CaliburnException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CaliburnException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Caliburn.Core.CaliburnException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CaliburnException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Caliburn.Core.CaliburnException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CaliburnException"/> class.
            </summary>
        </member>
        <member name="T:Caliburn.Core.ComponentInfo">
            <summary>
            Used to provide component info to a container configurator.
            </summary>
        </member>
        <member name="M:Caliburn.Core.ComponentInfo.#ctor(System.Object,System.Type,Caliburn.Core.ComponentLifetime)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.ComponentInfo"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="implementation">The implementation.</param>
            <param name="lifetime">The lifetime.</param>
        </member>
        <member name="P:Caliburn.Core.ComponentInfo.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.Core.ComponentInfo.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>The implementation.</value>
        </member>
        <member name="P:Caliburn.Core.ComponentInfo.Lifetime">
            <summary>
            Gets or sets the lifetime.
            </summary>
            <value>The lifetime.</value>
        </member>
        <member name="T:Caliburn.Core.ComponentLifetime">
            <summary>
            The lifetime of a Caliburn component.
            </summary>
        </member>
        <member name="F:Caliburn.Core.ComponentLifetime.Singleton">
            <summary>
            One instance per application.
            </summary>
        </member>
        <member name="F:Caliburn.Core.ComponentLifetime.PerRequest">
            <summary>
            A new instance is created on each request.
            </summary>
        </member>
        <member name="T:Caliburn.Core.CoreConfiguration">
            <summary>
            The configuration for Caliburn's core.
            </summary>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Action{System.Collections.Generic.IEnumerable{Caliburn.Core.ComponentInfo}})">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.CoreConfiguration"/> class.
            </summary>
            <param name="serviceLocator">The container.</param>
            <param name="configurator">Receives the components requested for configuration.</param>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.UsingThreadPool``1">
            <summary>
            Customizes the thread pool used by Caliburn.
            </summary>
            <typeparam name="T">The thread pool type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.UsingMethodFactory``1">
            <summary>
            Customizes the method factory used by Caliburn.
            </summary>
            <typeparam name="T">The method factory type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.UsingEventHandlerFactory``1">
            <summary>
            Customizes the event handler factory.
            </summary>
            <typeparam name="T">The event handler factory type.</typeparam>
            <returns>The configuration.</returns>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.Add(Caliburn.Core.CaliburnConfiguration)">
            <summary>
            Adds the specified child configuration.
            </summary>
            <param name="childConfiguration">The child configuration.</param>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.WithAssemblies(System.Reflection.Assembly[])">
            <summary>
            Adds assemblies to search for types registerable in the DI container.
            </summary>
            <param name="assembliesToRegister">The assemblies to register.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.CoreConfiguration.StartApplication">
            <summary>
            Starts the application.
            </summary>
        </member>
        <member name="P:Caliburn.Core.CoreConfiguration.Caliburn#Core#IConfigurationHook#Core">
            <summary>
            Gets the core configuration.
            </summary>
            <value>The core configuration.</value>
        </member>
        <member name="P:Caliburn.Core.CoreConfiguration.ServiceLocator">
            <summary>
            Gets the service locator.
            </summary>
            <value>The service locator.</value>
        </member>
        <member name="T:Caliburn.Core.ExtensionMethods">
            <summary>
            Various extension methods used by the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.GetView``1(Caliburn.Core.Metadata.IMetadataContainer)">
            <summary>
            Gets the view from metadata.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.SetView(Caliburn.Core.Metadata.IMetadataContainer,System.Object,System.Boolean)">
            <summary>
            Stores the view in metadata.
            </summary>
            <param name="container">The container.</param>
            <param name="view">The view.</param>
            <param name="useWeakReference">Indicates whether the view should be referenced weakly.</param>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified action to each item in the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.SafeToString(System.Object)">
            <summary>
            Safely converts an object to a string.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted string or null, if the value was null.</returns>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.GetResource``1(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="M:Caliburn.Core.ExtensionMethods.GetResource``1(System.Windows.FrameworkContentElement,System.Object)">
            <summary>
            Gets the resource by searching the hierarchy of of elements.
            </summary>
            <typeparam name="T">The type of resource.</typeparam>
            <param name="element">The element.</param>
            <param name="key">The key.</param>
            <returns>The resource.</returns>
        </member>
        <member name="T:Caliburn.Core.IConfigurator">
            <summary>
            Implemented by a class that can configure the componets with a container.
            </summary>
        </member>
        <member name="M:Caliburn.Core.IConfigurator.ConfigureWith(System.Collections.Generic.IEnumerable{Caliburn.Core.ComponentInfo})">
            <summary>
            Configures the container with the provided components.
            </summary>
            <param name="components">The components.</param>
        </member>
        <member name="T:Caliburn.Core.ResolveExtension">
            <summary>
            A Markup Extension that enables type resolution through the DI container in XAML.
            </summary>
        </member>
        <member name="M:Caliburn.Core.ResolveExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.ResolveExtension"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.ResolveExtension.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.ResolveExtension"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Caliburn.Core.ResolveExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="P:Caliburn.Core.ResolveExtension.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Caliburn.Core.ResolveExtension.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Caliburn.Core.ResolveExtension.DesignTimeValue">
            <summary>
            Gets or sets the design time value.
            </summary>
            <value>The design time value.</value>
        </member>
        <member name="T:Caliburn.Core.SimpleContainer">
            <summary>
            A simple dependency injection container./>.
            </summary>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Caliburn.Core.SimpleContainer"/> class.
            </summary>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.Register``2">
            <summary>
            Registers the specified service.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.Register(System.Type,System.Type)">
            <summary>
            Registers the specified service.
            </summary>
            <param name="service">The service type.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.Register(System.String,System.Type)">
            <summary>
            Registers the specified service.
            </summary>
            <param name="key">The service key.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.Register``1(System.String)">
            <summary>
            Registers the specified service.
            </summary>
            <param name="key">The service key.</param>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.RegisterSingleton``2">
            <summary>
            Registers the service as a singleton.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.RegisterSingleton(System.Type,System.Type)">
            <summary>
            Registers the service as a singleton.
            </summary>
            <param name="service">The service type.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.RegisterSingleton(System.String,System.Type)">
            <summary>
            Registers the service as a singleton.
            </summary>
            <param name="key">The service key.</param>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.RegisterSingleton``1(System.String)">
            <summary>
            Registers the service as a singleton.
            </summary>
            <param name="key">The service key.</param>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.IsRegistered(System.String)">
            <summary>
            Determines whether the specified service is already registered.
            </summary>
            <param name="fullName">The service type full name.</param>
            <returns>
            	<c>true</c> if the specified type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified service is already registered.
            </summary>
            <param name="type">The service type.</param>
            <returns>
            	<c>true</c> if the specified type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.AddHandler(System.Type,System.Func{System.Object})">
            <summary>
            Adds a handler for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.AddHandler(System.String,System.Func{System.Object})">
            <summary>
            Adds a handler for the specified type.
            </summary>
            <param name="key">The key.</param>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.GetHandler(System.Type)">
            <summary>
            Gets the handler for the specified type.
            </summary>
            <param name="type">The type to locate the handler for.</param>
            <returns>The type handler.</returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.GetInstance(System.String)">
            <summary>
            Resolves the service by key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            A configured instance of the resolved service.
            </returns>
        </member>
        <member name="M:Caliburn.Core.SimpleContainer.ConfigureWith(System.Collections.Generic.IEnumerable{Caliburn.Core.ComponentInfo})">
            <summary>
            Configures the container with the provided components.
            </summary>
            <param name="components">The components.</param>
        </member>
    </members>
</doc>
