<?xml version="1.0" encoding='iso-8859-1' ?>
<project
	name="rhino.tools"
	default="build"
	xmlns="http://nant.sf.net/release/0.85/nant.xsd"
>
	<property name="root.dir" value="." />
	<include buildfile="${root.dir}/common.xml" />
	
	<fileset id="buildfiles.all">
		<!-- Files have to be in dependency order -->
		
		<include name="mocks/default.build" />		
		<include name="testing/default.build" />		
		<include name="dsl/default.build" />
		<include name="commons/default.build" />
		<include name="security/default.build" />
		<include name="etl/default.build" />
		<include name="igloo/default.build" />	
		<include name="licensing/default.build" />		
		<include name="pht/default.build" />
		<include name="queues/default.build" />
		<include name="esb/default.build" />
	</fileset>

	<target name="debug" description="Selects the debug build configuration">
		<property name="project.config" value="debug" />
	</target>

	<target name="release" description="Selects the release build configuration">
		<property name="project.config" value="release" />
	</target>

	<target name="quick" description="Speed up the build by skipping tests">
		<property name="common.testrunner.enabled" value="false" />
	</target>

	<target name="build"
		depends="init copy-referenced-assemblies"
		description="Builds rhino.tools in the current configuration">

		<nant target="build">
			<buildfiles refid="buildfiles.all" />
		</nant>

	</target>

	<target name="rebuild"
		depends="init recreate-build-directory build"
		description="Rebuilds rhino.tools in the current configuration" />

	<target name="installer" depends="init releaseDocs zip-source">
		<nant buildfile="Setup/Setup.build" />
	</target>

	<target name="init" depends="common.init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${testresults.dir}" />
		
		<call target="common.find-svninfo" />
		<call target="common.find-nunit" if="${common.testrunner.enabled}" />
	</target>
	
	<target name="clean" description="Deletes current build artifacts" depends="common.init">
		<delete dir="${build.dir}" failonerror="false" />
		<delete>
			<fileset basedir="${build.base.dir}">
				<include name="*.*" />
			</fileset>
		</delete>
	</target>
		
	<target name="clean-vs" description="Delete Visual Studio artifacts" depends="common.init">
		<!-- NB - this target will fail if you have a solution open in Visual Studio -->
		<echo message="Gathering files for removal..." />
		<foreach item="File" property="filename">
			<in>
				<items basedir=".">
					<include name="**/*.suo" />
					<include name="*/*.csproj.user" />
				</items>
			</in>
			<do>
				<delete file="${filename}" />
			</do>
		</foreach>
		<echo message="Gathering folders for removal..." />
		<foreach item="Folder" property="foldername">
			<in>
				<items basedir=".">
					<include name="**/obj" />
					<include name="**/_ReSharper*" />
				</items>
			</in>
			<do>
				<delete dir="${foldername}" failonerror="false" />
			</do>
		</foreach>
	</target>

	<target name="cleanall" description="Deletes all build artifacts" depends="common.init">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="${build.base.dir}" failonerror="false" />
		<call target="clean-vs" />
	</target>
	
	<target name="recreate-build-directory">
		<echo message="Current Directory is ${project::get-base-directory()}" />
		<echo message="Build Directory is ${build.dir}" />

		<!-- Prepare build directory -->
		<delete dir="${build.dir}" failonerror="false" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${testresults.dir}" />
		<call target="copy-referenced-assemblies" />
		<property name="build.rebuild" value="true" />
	</target>

	<target name="copy-referenced-assemblies">
		<copy todir="${build.dir}" >
			<fileset basedir="${lib.dir}/Tools/MbUnit">
				<include name="*.dll" />
				<exclude name="log4net.*" />
			</fileset>
		</copy>
		
		<foreach item="String" delim=" " property="dependency.dir" 
			in="Boo Castle FileHelpers ICSharpCode Interop NHibernate SqlCE SqLite.Net System VisualStudio Esent xunit Wintellect">
			
			<!-- Copy framework-neutral libraries -->
			<copy todir="${build.dir}" >
				<fileset basedir="${lib.dir}/${dependency.dir}">
					<include name="*.dll" />
					<include name="*.xml" />
					<include name="*.license.txt" />
				</fileset>
			</copy>
			
			<!-- Copy family-specific libraries installed on the system-->
			<copy file="${path::combine(nant::get-base-directory(), 'NAnt.Core.dll')}" todir="${lib.family.dir}" />
	
			<!-- Copy family-specific libraries -->
			<!-- 
				The build of log4net works just fine for all versions of .NET.
				When they do get framework specific extensions then we
				can just move them to the framework specific section
			-->
			<copy todir="${build.dir}">
				<fileset basedir="${lib.family.dir}/${dependency.dir}">
					<include name="*.dll" />
					<include name="*.xml" />
					<include name="*.license.txt" />
				</fileset>
			</copy>
	
			<!-- Copy framework-specific libraries -->
			<copy todir="${build.dir}">
				<fileset basedir="${lib.framework.dir}/${dependency.dir}">
					<include name="*.dll" />
					<include name="*.xml" />
					<include name="*.license.txt" />
				</fileset>
			</copy>
			
		</foreach>
		
	</target>

	<target name="generate-assemblyinfo"
		depends="init"
		description="Generate AssemblyInfo files">

		<property name="visual-studio" value="true" />
		<nant target="generate-assemblyinfo">
			<buildfiles refid="buildfiles.all" />
		</nant>

	</target>

	<target name="build-all-frameworks" depends="init">
		<!-- Save the current framework -->
		<property name="current.framework.saved" value="${nant.settings.currentframework}" />

		<!-- Execute build for each framework -->
		<foreach item="String" delim=" " property="framework" in="net-1.1 net-2.0">
			<call target="set-${framework}-framework-configuration" />
			<call target="build" />
		</foreach>

		<!-- Reset the current framework to the saved value -->
		<call target="set-${current.framework.saved}-framework-configuration" />
	</target>

	<!-- Packaging related tasks -->
	
	<target name="package" depends="zip-build"
		description="Creates Zip files for Release">

		<echo message="Created a '${project.config}' package in file://${build.zip.fullpath}" />

		<delete file="${build.base.dir}/rhino.tools-sourcecode.zip" failonerror="false" />
		<delete file="${build.dir}/test-results.zip" failonerror="false" />
		<delete file="${build.dir}/external-dependencies.zip" failonerror="false" />
		
	</target>

	<!-- depends="build" -->
	<target name="zip-build" depends="build">
		<property name="build.zip.dir" value="${build.dir}" overwrite="false" />
		<property name="build.zip.file" value="rhino.tools-${framework::get-target-framework()}-${project.config}-${datetime::get-year(datetime::now())}-${datetime::get-month(datetime::now())}-${datetime::get-day(datetime::now())} (r${svn.revision}).zip" overwrite="false" dynamic="true" />
		<property name="build.zip.fullpath" value="${build.zip.dir}/${build.zip.file}" readonly="true" />
		
		<delete>
			<fileset basedir="${root.dir}">
				<include name="*.zip" />
				<include name="${build.dir}/external-dependencies.zip" />
			</fileset>
		</delete>

		<!-- Prepare release note files -->
		<!--<call target="createreleasenotes" />-->

		<!-- Include a zip file with all source code -->
		<call target="zip-source" if="${ build.debug == 'Enable' }" />

		<!-- Include a zip file with all dependencies -->
		<call target="zip-dependencies" />

		<!-- Create the master zip file with all files included -->
		<zip zipfile="${build.zip.fullpath}">
			<fileset basedir="${build.dir}" prefix="bin" >
				<include name="**/rhino.tools*.*" />
				<!--
				<include name="AspectSharp*.*" />
				-->
				<include name="external-dependencies.zip" />
				<exclude name="*Tests.*" />
				<exclude name="test-results/**" />
			</fileset>
			<fileset basedir="${build.base.dir}" >
				<include name="rhino-tools-sourcecode.zip" />
			</fileset>
			<fileset basedir="${releasenotes.dir}" prefix="ReleaseNotes" >
				<include name="**/*.txt" />
			</fileset>
		</zip>
	</target>
	
	<target name="zip-dependencies"  >
		<zip zipfile="${build.dir}/external-dependencies.zip">
			<fileset basedir="${build.dir}">
				<include name="*.*" />
				<exclude name="**/*.zip" />
			</fileset>
		</zip>
	</target>

	
	<target name="zip-source">
		<zip zipfile="${build.base.dir}/rhino-tools-sourcecode.zip">
			<fileset basedir="${root.dir}">
				<include name="**/*.build" />
				<include name="**/*.sln" />
				<include name="**/*.cs" />
				<include name="**/*.cd" />
				<include name="**/*.snk" />
				<include name="**/*.ico" />
				<include name="**/*.csproj" />
				<include name="**/*.xml" />
				<include name="**/*.config" />
				<include name="**/*.lang" />
				<include name="**/*.txt" />
				<include name="**/*.inc" />
				<include name="**/*.vm" />
				<include name="**/*.njs" />
				<include name="**/*.gif" />
				<include name="**/*.resx" />
				<include name="**/*.boo" />
				<include name="**/*.booproj" />
				<include name="**/*.brail" />
				<include name="**/*.brailjs" />
				<include name="**/*.prjx" />
				<include name="**/*.cmbx" />
				<include name="**/*.aspx" />
				<include name="**/*.asax" />
				<include name="**/*.svc" />
				<include name="**/*.htm" />
				<include name="**/*.html" />
				<include name="**/*.rb" />
				<include name="**/*.g" />
				<include name="**/*.resharper" />
				<include name="**/*.shfb" />
				<exclude name="**/obj/" />
				<exclude name="**/obj/**/*.*" />
				<exclude name="**/bin/**/*.*" />
				<exclude name="**/temp/**/*.*" />
				<exclude name="**/*.user" />
				<exclude name="**/_ReSharper.*" />
				<exclude name="**/_ReSharper.*/**/*.*" />
				<exclude name="**/*.suo" />
				<exclude name="SharedLibs/**/*.*" />
				<exclude name="Samples/**/*.*" />
				<exclude name="Experiments/**/*.*" />
				<exclude name="build/**/*.*" />
				<exclude name="Rook/**/*.*" />
				<exclude name="docs/**/*.*" />
				<exclude name="setup/*.*" />
				<exclude name="Tools/VSNetWizards/**/*.*" />
				<exclude name="MonoRail2/**/*.*" />
				<exclude name="Tools/SubversionHooks/**/*.*" />
				<exclude name="Tools/ManagedExtensions/**/*.*" />
			</fileset>
		</zip>
	</target>
	
	<description>Documentation generation.</description>
	<property name="outputDocs.file" value="rhino.tols"/>
	
	<description>Generates documentation with default properties.</description>
	<target name="releaseDocs" depends="init,cleanup">
		<property name="sanddoc.visibleitems" value="Attributes, InheritedMembers, InheritedFrameworkMembers, Protected, SealedProtected" />
		<property name="sanddoc.missingtags" value="Summary, Parameter, AutoDocumentCtors, Namespace" />
		<call target="generateReleaseDocs"/>
	</target>
	
	<description>Generates documentation for developers, with all missing information indicated and private members visible.</description>
	<target name="devDocs" depends="init,cleanup">
		<property name="sanddoc.visibleitems" value="Attributes, InheritedMembers, InheritedFrameworkMembers, Privates, Protected, SealedProtected" />
		<property name="sanddoc.missingtags" value="Summary, Parameter, Returns, Value, AutoDocumentCtors, Namespace" />
		<property name="outputDocs.file" value="RhinoToolsDev"/>
		<call target="generateReleaseDocs"/>
	</target>
	
	<description>Generates documentation for release.</description>
	<target name="generateReleaseDocs">
		<property name="root.dir" value="." />
		<exec program="SandcastleBuilderConsole" basedir="${shfb.dir}" commandline='sandcastle_docs.shfb'>
			<arg value="-FrameworkVersion=${framework::get-clr-version(framework::get-target-framework())}" />
			<arg value="-SandcastlePath=${sandcastle.dir}" />
			<arg value="-HtmlHelp1xCompilerPath=${htmlhelp1x.dir}" />
			<arg value="-OutputPath=${docs.dir}" />
			<arg value="-HtmlHelpName=${outputDocs.file}" />
			<arg value="-HelpFileFormat=HtmlHelp1x" />
			<arg value="-VisibleItems=${sanddoc.visibleitems}" />
			<arg value="-MissingTags=${sanddoc.missingtags}" />
		</exec>
	</target>
	
	<description>Cleans up prior to documentation generation.</description>
	<target name="cleanup">
		<delete>
			<fileset>
				<include name="${docs.dir}/**"/>
				<exclude name="**/*.chm"/>
			</fileset>
		</delete>
	</target>

</project>
